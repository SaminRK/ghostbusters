{"version":3,"sources":["assets/ghost.png","GhostImage.jsx","utils.js","FooterMessage.jsx","Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["GhostInBackground","props","src","ghost","className","style","left","horizontalPosition","top","height","size","getRandomUserId","length","result","characters","i","charAt","Math","floor","random","FooterMessage","href","Game","state","rows","columns","grid","getInitialGameGrid","move","pos","getInitialPosition","colorGrid","getInitialColorGrid","bustMode","hitGrid","getInitialHitGrid","busted","bustsLeft","advanceTime","bind","toggleBustMode","resetGame","console","log","this","setState","Array","j","row","col","code","value","red","green","blue","n","m","max","min","newBustMode","selRow","selCol","posRow","posCol","mann_dist","abs","res","newColorGrid","newGrid","E","d","fact","newHitGrid","newBustsLeft","bust","setGridAfterSensor","optimizely","track","ii","jj","sum","r","csum","newRow","newCol","rowStyle","width","margin","map","column","buttonText","toFixed","buttonStyle","background","getBoxBgColor","border","getColor","onClick","handleClick","React","Component","WrappedGame","withOptimizely","createInstance","sdkKey","Ghosts","useDecision","decision","showGhostInBkg","variables","show_ghost_in_bkg","ghostSize","ghost_size","enabled","App","randomUserId","user","id","attributes","is_just_starting","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3b9230b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ghost.b9434479.png\";","import ghost from \"./assets/ghost.png\";\nimport \"./GhostImage.css\";\n\nfunction GhostInBackground(props) {\n  return (\n    <img\n      src={ghost}\n      className=\"leftGhostImage\"\n      style={{ left: props.horizontalPosition, top: 50, height: props.size, }}\n    ></img>\n  );\n}\n\nexport default GhostInBackground;\n","function getRandomUserId(length) {\n    let result           = '';\n    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n   }\n   return result;\n}\n\nexport default getRandomUserId;","import './Game.css';\n\nfunction FooterMessage() {\n  return (\n    <div className=\"centraliser credit\">\n      This game is a web-version of the ghostbusters game from the course\n      CS188:Intro to AI at UC Berkeley&nbsp;\n      <a href=\"https://inst.eecs.berkeley.edu/~cs188/\">visit to know more</a>\n    </div>\n  );\n}\n\nexport default FooterMessage;\n","import React from \"react\";\nimport \"./Game.css\";\nimport FooterMessage from \"./FooterMessage\";\nimport { withOptimizely } from \"@optimizely/react-sdk\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rows: 10,\n      columns: 10,\n      grid: this.getInitialGameGrid(10, 10),\n      move: [\n        [1, 30, 1],\n        [30, 1, 30],\n        [1, 30, 1],\n      ],\n      pos: this.getInitialPosition(10, 10),\n      colorGrid: this.getInitialColorGrid(10, 10),\n      bustMode: false,\n      hitGrid: this.getInitialHitGrid(10, 10),\n      busted: false,\n      bustsLeft: 3,\n    };\n\n    this.advanceTime = this.advanceTime.bind(this);\n    this.toggleBustMode = this.toggleBustMode.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  resetGame() {\n    console.log(\"reset\");\n    this.setState({\n      grid: this.getInitialGameGrid(10, 10),\n      pos: this.getInitialPosition(10, 10),\n      colorGrid: this.getInitialColorGrid(10, 10),\n      bustMode: false,\n      hitGrid: this.getInitialHitGrid(10, 10),\n      busted: false,\n      bustsLeft: 3,\n    });\n  }\n\n  getInitialHitGrid(rows, columns) {\n    var grid = new Array(rows);\n    for (var i = 0; i < rows; ++i) {\n      grid[i] = [];\n      for (var j = 0; j < columns; ++j) {\n        grid[i][j] = -1;\n      }\n    }\n    return grid;\n  }\n\n  getInitialGameGrid(rows, columns) {\n    var grid = new Array(rows);\n    for (var i = 0; i < rows; ++i) {\n      grid[i] = [];\n      for (var j = 0; j < columns; ++j) {\n        grid[i][j] = 1.0 / (rows * columns);\n      }\n    }\n    return grid;\n  }\n\n  getInitialPosition(rows, columns) {\n    var row = Math.floor(Math.random() * rows);\n    var col = Math.floor(Math.random() * columns);\n    console.log({ row, col });\n    return [row, col];\n  }\n\n  getColor(code) {\n    if (code === \"r\") return \"red\";\n    else if (code === \"o\") return \"orange\";\n    else if (code === \"y\") return \"yellow\";\n    else if (code === \"g\") return \"green\";\n\n    return \"black\";\n  }\n\n  getInitialColorGrid(rows, columns) {\n    var grid = new Array(rows);\n    for (var i = 0; i < rows; ++i) {\n      grid[i] = [];\n      for (var j = 0; j < columns; ++j) {\n        grid[i][j] = \" \";\n      }\n    }\n    return grid;\n  }\n\n  getBoxBgColor(value) {\n    var red, green, blue;\n    const n = this.state.rows;\n    const m = this.state.columns;\n    if (n * m * value <= 1) {\n      blue = Math.max(150, Math.min(255, Math.floor(n * m * value * 256)));\n    } else if (value < 0.5) {\n      blue = Math.min(255, Math.floor((1 - value) * 256));\n    } else {\n      blue = 0;\n    }\n    red = Math.min(255, Math.floor(value * m * 256));\n    if (red + blue > 255) {\n      green = 0.3 * Math.min(blue, red);\n      blue *= 0.85;\n      red *= 0.6;\n    } else green = Math.min(blue, red);\n\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  toggleBustMode() {\n    if (this.state.bustsLeft === 0) return;\n    var newBustMode = !this.state.bustMode;\n    this.setState({ bustMode: newBustMode });\n  }\n\n  setGridAfterSensor(selRow, selCol) {\n    const posRow = this.state.pos[0];\n    const posCol = this.state.pos[1];\n    const n = this.state.rows;\n    const m = this.state.columns;\n\n    const mann_dist = Math.abs(selCol - posCol) + Math.abs(selRow - posRow);\n    var res = \"g\";\n    if (mann_dist <= 1) res = \"r\";\n    else if (mann_dist <= 2) res = \"o\";\n    else if (mann_dist <= 4) res = \"y\";\n\n    var newColorGrid = this.state.colorGrid;\n    newColorGrid[selRow][selCol] = res;\n\n    var newGrid = new Array(n);\n    var E = new Array(n);\n\n    var i, j;\n    for (i = 0; i < n; ++i) {\n      newGrid[i] = [];\n      E[i] = [];\n      for (j = 0; j < m; ++j) {\n        newGrid[i][j] = 0.0;\n        E[i][j] = 0;\n      }\n    }\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        const d = Math.abs(selRow - i) + Math.abs(selCol - j);\n        if (d <= 1) {\n          if (res === \"r\") E[i][j] = 1;\n        } else if (d <= 2) {\n          if (res === \"o\") E[i][j] = 1;\n        } else if (d <= 4) {\n          if (res === \"y\") E[i][j] = 1;\n        } else {\n          if (res === \"g\") E[i][j] = 1;\n        }\n      }\n    }\n\n    var fact = 0.0;\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < n; ++j) {\n        newGrid[i][j] = E[i][j] * this.state.grid[i][j];\n        fact += newGrid[i][j];\n      }\n    }\n    if (fact < 1e-18) return;\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < n; ++j) {\n        newGrid[i][j] /= fact;\n      }\n    }\n    this.setState({ grid: newGrid, colorGrid: newColorGrid });\n  }\n\n  bust(selRow, selCol) {\n    var newHitGrid = this.state.hitGrid;\n    const n = this.state.rows;\n    const m = this.state.columns;\n    var i, j;\n    var newGrid = this.state.grid;\n    if (selRow === this.state.pos[0] && selCol === this.state.pos[1]) {\n      // TODO: for 1 ghost we are making every other boxes probability 0\n      // For multiple ghosts this might not be the case\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          newGrid[i][j] = 0;\n        }\n      }\n\n      newHitGrid = this.state.hitGrid;\n      newHitGrid[selRow][selCol] = 1;\n      this.setState({ hitGrid: newHitGrid });\n\n      newGrid[selRow][selCol] = 1;\n    } else {\n      newHitGrid = this.state.hitGrid;\n      newHitGrid[selRow][selCol] = 0;\n      this.setState({ hitGrid: newHitGrid });\n\n      newGrid[selRow][selCol] = 0;\n    }\n\n    var fact = 0;\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        fact += newGrid[i][j];\n      }\n    }\n    if (fact > 1e-18) {\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          newGrid[i][j] /= fact;\n        }\n      }\n    }\n\n    var newBustsLeft = this.state.bustsLeft - 1;\n    this.setState({\n      hitGrid: newHitGrid,\n      bustMode: false,\n      bustsLeft: newBustsLeft,\n      grid: newGrid,\n      busted: true,\n    });\n  }\n\n  handleClick(selRow, selCol) {\n    // console.log({ selectedRow: selRow, selectedCol: selCol });\n    if (this.state.bustMode) {\n      this.bust(selRow, selCol);\n    } else {\n      this.setGridAfterSensor(selRow, selCol);\n    }\n\n    const { optimizely } = this.props;\n    optimizely.track(\"box_click\");\n  }\n\n  advanceTime() {\n    const n = this.state.rows;\n    const m = this.state.columns;\n    const move = this.state.move;\n\n    // assign new position to ghost\n    var posRow = this.state.pos[0],\n      posCol = this.state.pos[1];\n    var i, j, ii, jj;\n    var sum = 0;\n\n    for (ii = posRow - 1; ii <= posRow + 1; ++ii) {\n      for (jj = posCol - 1; jj <= posCol + 1; ++jj) {\n        if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n          sum += move[ii - posRow + 1][jj - posCol + 1];\n        }\n      }\n    }\n    var r = Math.floor(Math.random() * sum);\n    var csum = 0;\n    var newRow = n - 1,\n      newCol = m - 1;\n\n    for (ii = posRow - 1; ii <= posRow + 1; ++ii) {\n      for (jj = posCol - 1; jj <= posCol + 1; ++jj) {\n        if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n          csum += move[ii - posRow + 1][jj - posCol + 1];\n          if (csum > r) {\n            newRow = ii;\n            newCol = jj;\n            ii = posRow + 100;\n            break;\n          }\n        }\n      }\n    }\n\n    var newGrid = new Array(n);\n    for (i = 0; i < n; ++i) {\n      newGrid[i] = [];\n      for (j = 0; j < m; ++j) {\n        newGrid[i][j] = 0.0;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        sum = 0;\n        for (ii = i - 1; ii <= i + 1; ++ii) {\n          for (jj = j - 1; jj <= j + 1; ++jj) {\n            if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n              sum += move[ii - i + 1][jj - j + 1];\n            }\n          }\n        }\n        for (ii = i - 1; ii <= i + 1; ++ii) {\n          for (jj = j - 1; jj <= j + 1; ++jj) {\n            if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n              newGrid[ii][jj] +=\n                (this.state.grid[i][j] * move[ii - i + 1][jj - j + 1]) / sum;\n            }\n          }\n        }\n      }\n    }\n\n    var newColorGrid = this.getInitialColorGrid(n, m);\n    if (this.state.busted) {\n      this.setState({\n        grid: newGrid,\n        colorGrid: newColorGrid,\n        pos: [newRow, newCol],\n        bustMode: false,\n        hitGrid: this.getInitialHitGrid(n, m),\n        busted: false,\n      });\n    } else {\n      this.setState({\n        grid: newGrid,\n        colorGrid: newColorGrid,\n        pos: [newRow, newCol],\n        bustMode: false,\n      });\n    }\n  }\n\n  render() {\n    var rowStyle = {\n      width: `${75 * this.state.columns}px`,\n      margin: \"auto\",\n    };\n    return (\n      <div>\n        <div className=\"gameGrid\">\n          {this.state.grid.map((rows, row) => {\n            return (\n              <div key={row} style={rowStyle}>\n                {rows.map((value, column) => {\n                  var buttonText = value.toFixed(3);\n                  var buttonStyle = {\n                    background: this.getBoxBgColor(\n                      this.state.grid[row][column]\n                    ),\n                  };\n                  if (this.state.colorGrid[row][column] !== \" \") {\n                    buttonStyle.border = `4px solid ${this.getColor(\n                      this.state.colorGrid[row][column]\n                    )}`;\n                  }\n                  if (this.state.hitGrid[row][column] === 0) {\n                    buttonStyle.background = \"green\";\n                    buttonText = \"MISS\";\n                  } else if (this.state.hitGrid[row][column] >= 1) {\n                    buttonStyle.background = \"red\";\n                    buttonText = \"HIT\";\n                    if (this.state.hitGrid[row][column] > 1) {\n                      buttonText += `${this.state.hitGrid[row][column]}`;\n                    }\n                  }\n                  // console.log(buttonStyle);\n                  return (\n                    <button\n                      key={row * this.state.columns + column}\n                      className=\"boxes\"\n                      onClick={this.handleClick.bind(this, row, column)}\n                      // need to bind this, otherwise button event triggered on page load.. need to learn why\n                      style={buttonStyle}\n                    >\n                      {buttonText}\n                    </button>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n\n        <div>\n          <div className=\"centraliser\">\n            <button className=\"control-buttons\" onClick={this.advanceTime}>\n              TIME+1\n            </button>\n            <button\n              className={\n                \"control-buttons bustButton\" +\n                (this.state.bustMode ? \"Red\" : \"\")\n              }\n              onClick={this.toggleBustMode}\n            >\n              BUST\n            </button>\n            <button className=\"control-buttons\" onClick={this.resetGame}>\n              RESET\n            </button>\n          </div>\n\n          <div className=\"centraliser\">{`POSITION: (${this.state.pos[0]}, ${this.state.pos[1]})`}</div>\n          <div className=\"centraliser\">{`BUSTS LEFT X ${this.state.bustsLeft}`}</div>\n          <FooterMessage />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst WrappedGame = withOptimizely(Game);\n\nexport default WrappedGame;\n","import \"./App.css\";\nimport GhostInBackground from \"./GhostImage\";\nimport {\n  createInstance,\n  OptimizelyProvider,\n  useDecision,\n} from \"@optimizely/react-sdk\";\nimport getRandomUserId from \"./utils\";\nimport WrappedGame from \"./Game\";\n\nconst optimizely = createInstance({\n  sdkKey: \"KaL3fPyXBeciBoAn3hGhu\",\n});\n\nfunction App() {\n  const randomUserId = getRandomUserId(6);\n  console.log(randomUserId);\n\n  return (\n    <OptimizelyProvider\n      optimizely={optimizely}\n      user={{\n        id: randomUserId,\n        attributes: {\n          is_just_starting: true,\n        }\n      }}\n    >\n      <Ghosts />\n      <WrappedGame />\n    </OptimizelyProvider>\n  );\n}\n\nfunction Ghosts() {\n  const [decision] = useDecision('ghost_in_bkg');\n  const showGhostInBkg = decision.variables.show_ghost_in_bkg;\n  const ghostSize = decision.variables.ghost_size;\n\n  return (\n    <>\n    {decision && decision.enabled && showGhostInBkg && (\n      <>\n        <GhostInBackground horizontalPosition={0} size={ghostSize} />\n         {/* Need to make horizontalPosition adapt to screen size */}\n        <GhostInBackground horizontalPosition={1200} size={ghostSize} />\n      \n      </>\n      \n    )}\n    </>\n  );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}