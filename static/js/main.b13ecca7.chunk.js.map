{"version":3,"sources":["assets/ghost.png","GhostImage.jsx","utils.js","FooterMessage.jsx","Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["GhostInBackground","props","src","ghost","className","style","left","horizontalPosition","top","height","size","getRandomUserId","length","result","characters","i","charAt","Math","floor","random","FooterMessage","href","Game","state","rows","columns","grid","getInitialGameGrid","move","pos","getInitialPosition","colorGrid","getInitialColorGrid","bustMode","hitGrid","getInitialHitGrid","busted","bustsLeft","advanceTime","bind","toggleBustMode","Array","j","row","col","console","log","code","value","red","green","blue","n","this","m","max","min","newBustMode","setState","selRow","selCol","posRow","posCol","mann_dist","abs","res","newColorGrid","newGrid","E","d","fact","newHitGrid","newBustsLeft","bust","setGridAfterSensor","optimizely","track","ii","jj","sum","r","csum","newRow","newCol","rowStyle","width","margin","map","column","buttonText","toFixed","buttonStyle","background","getBoxBgColor","border","getColor","onClick","handleClick","React","Component","WrappedGame","withOptimizely","createInstance","sdkKey","Ghosts","useDecision","decision","showGhostInBkg","variables","show_ghost_in_bkg","ghostSize","ghost_size","enabled","App","randomUserId","user","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b13ecca7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ghost.b9434479.png\";","import ghost from \"./assets/ghost.png\";\nimport \"./GhostImage.css\";\n\nfunction GhostInBackground(props) {\n  return (\n    <img\n      src={ghost}\n      className=\"leftGhostImage\"\n      style={{ left: props.horizontalPosition, top: 50, height: props.size, }}\n    ></img>\n  );\n}\n\nexport default GhostInBackground;\n","function getRandomUserId(length) {\n    let result           = '';\n    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for ( var i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n   }\n   return result;\n}\n\nexport default getRandomUserId;","import './Game.css';\n\nfunction FooterMessage() {\n  return (\n    <div className=\"centraliser credit\">\n      This game is a web-version of the ghostbusters game from the course\n      CS188:Intro to AI at UC Berkeley&nbsp;\n      <a href=\"https://inst.eecs.berkeley.edu/~cs188/\">visit to know more</a>\n    </div>\n  );\n}\n\nexport default FooterMessage;\n","import React from \"react\";\nimport \"./Game.css\";\nimport FooterMessage from \"./FooterMessage\"\nimport { withOptimizely } from \"@optimizely/react-sdk\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rows: 10,\n      columns: 10,\n      grid: this.getInitialGameGrid(10, 10),\n      move: [\n        [1, 30, 1],\n        [30, 1, 30],\n        [1, 30, 1],\n      ],\n      pos: this.getInitialPosition(10, 10),\n      colorGrid: this.getInitialColorGrid(10, 10),\n      bustMode: false,\n      hitGrid: this.getInitialHitGrid(10, 10),\n      busted: false,\n      bustsLeft: 3,\n    };\n\n    this.advanceTime = this.advanceTime.bind(this);\n    this.toggleBustMode = this.toggleBustMode.bind(this);\n  }\n\n  getInitialHitGrid(rows, columns) {\n    var grid = new Array(rows);\n    for (var i = 0; i < rows; ++i) {\n      grid[i] = [];\n      for (var j = 0; j < columns; ++j) {\n        grid[i][j] = -1;\n      }\n    }\n    return grid;\n  }\n\n  getInitialGameGrid(rows, columns) {\n    var grid = new Array(rows);\n    for (var i = 0; i < rows; ++i) {\n      grid[i] = [];\n      for (var j = 0; j < columns; ++j) {\n        grid[i][j] = 1.0 / (rows * columns);\n      }\n    }\n    return grid;\n  }\n\n  getInitialPosition(rows, columns) {\n    var row = Math.floor(Math.random() * rows);\n    var col = Math.floor(Math.random() * columns);\n    console.log({ row, col });\n    return [row, col];\n  }\n\n  getColor(code) {\n    if (code === \"r\") return \"red\";\n    else if (code === \"o\") return \"orange\";\n    else if (code === \"y\") return \"yellow\";\n    else if (code === \"g\") return \"green\";\n\n    return \"black\";\n  }\n\n  getInitialColorGrid(rows, columns) {\n    var grid = new Array(rows);\n    for (var i = 0; i < rows; ++i) {\n      grid[i] = [];\n      for (var j = 0; j < columns; ++j) {\n        grid[i][j] = \" \";\n      }\n    }\n    return grid;\n  }\n\n  getBoxBgColor(value) {\n    var red, green, blue;\n    const n = this.state.rows;\n    const m = this.state.columns;\n    if (n * m * value <= 1) {\n      blue = Math.max(150, Math.min(255, Math.floor(n * m * value * 256)));\n    } else if (value < 0.5) {\n      blue = Math.min(255, Math.floor((1 - value) * 256));\n    } else {\n      blue = 0;\n    }\n    red = Math.min(255, Math.floor(value * m * 256));\n    if (red + blue > 255) {\n      green = 0.3 * Math.min(blue, red);\n      blue *= 0.85;\n      red *= 0.6;\n    } else green = Math.min(blue, red);\n\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  toggleBustMode() {\n    if (this.state.bustsLeft === 0) return;\n    var newBustMode = !this.state.bustMode;\n    this.setState({ bustMode: newBustMode });\n  }\n\n  setGridAfterSensor(selRow, selCol) {\n    const posRow = this.state.pos[0];\n    const posCol = this.state.pos[1];\n    const n = this.state.rows;\n    const m = this.state.columns;\n\n    const mann_dist = Math.abs(selCol - posCol) + Math.abs(selRow - posRow);\n    var res = \"g\";\n    if (mann_dist <= 1) res = \"r\";\n    else if (mann_dist <= 2) res = \"o\";\n    else if (mann_dist <= 4) res = \"y\";\n\n    var newColorGrid = this.state.colorGrid;\n    newColorGrid[selRow][selCol] = res;\n\n    var newGrid = new Array(n);\n    var E = new Array(n);\n\n    var i, j;\n    for (i = 0; i < n; ++i) {\n      newGrid[i] = [];\n      E[i] = [];\n      for (j = 0; j < m; ++j) {\n        newGrid[i][j] = 0.0;\n        E[i][j] = 0;\n      }\n    }\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        const d = Math.abs(selRow - i) + Math.abs(selCol - j);\n        if (d <= 1) {\n          if (res === \"r\") E[i][j] = 1;\n        } else if (d <= 2) {\n          if (res === \"o\") E[i][j] = 1;\n        } else if (d <= 4) {\n          if (res === \"y\") E[i][j] = 1;\n        } else {\n          if (res === \"g\") E[i][j] = 1;\n        }\n      }\n    }\n\n    var fact = 0.0;\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < n; ++j) {\n        newGrid[i][j] = E[i][j] * this.state.grid[i][j];\n        fact += newGrid[i][j];\n      }\n    }\n    if (fact < 1e-18) return;\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < n; ++j) {\n        newGrid[i][j] /= fact;\n      }\n    }\n    this.setState({ grid: newGrid, colorGrid: newColorGrid });\n  }\n\n  bust(selRow, selCol) {\n    var newHitGrid = this.state.hitGrid;\n    const n = this.state.rows;\n    const m = this.state.columns;\n    var i, j;\n    var newGrid = this.state.grid;\n    if (selRow === this.state.pos[0] && selCol === this.state.pos[1]) {\n      // TODO: for 1 ghost we are making every other boxes probability 0\n      // For multiple ghosts this might not be the case\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          newGrid[i][j] = 0;\n        }\n      }\n\n      newHitGrid = this.state.hitGrid;\n      newHitGrid[selRow][selCol] = 1;\n      this.setState({hitGrid: newHitGrid});\n\n      newGrid[selRow][selCol] = 1;\n    } else {\n      newHitGrid = this.state.hitGrid;\n      newHitGrid[selRow][selCol] = 0;\n      this.setState({hitGrid: newHitGrid});\n      \n      newGrid[selRow][selCol] = 0;\n    }\n\n    var fact = 0;\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        fact += newGrid[i][j];\n      }\n    }\n    if (fact > 1e-18) {\n      for (i = 0; i < n; ++i) {\n        for (j = 0; j < m; ++j) {\n          newGrid[i][j] /= fact;\n        }\n      }\n    }\n\n    var newBustsLeft = this.state.bustsLeft - 1;\n    this.setState({\n      hitGrid: newHitGrid,\n      bustMode: false,\n      bustsLeft: newBustsLeft,\n      grid: newGrid,\n      busted: true,\n    });\n  }\n\n  handleClick(selRow, selCol) {\n    // console.log({ selectedRow: selRow, selectedCol: selCol });\n    if (this.state.bustMode) {\n      this.bust(selRow, selCol);\n    } else {\n      this.setGridAfterSensor(selRow, selCol);\n    }\n\n    const {optimizely} = this.props;\n    optimizely.track('box_click');\n  }\n\n  advanceTime() {\n    const n = this.state.rows;\n    const m = this.state.columns;\n    const move = this.state.move;\n\n    // assign new position to ghost\n    var posRow = this.state.pos[0],\n      posCol = this.state.pos[1];\n    var i, j, ii, jj;\n    var sum = 0;\n\n    for (ii = posRow - 1; ii <= posRow + 1; ++ii) {\n      for (jj = posCol - 1; jj <= posCol + 1; ++jj) {\n        if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n          sum += move[ii - posRow + 1][jj - posCol + 1];\n        }\n      }\n    }\n    var r = Math.floor(Math.random() * sum);\n    var csum = 0;\n    var newRow = n - 1,\n      newCol = m - 1;\n\n    for (ii = posRow - 1; ii <= posRow + 1; ++ii) {\n      for (jj = posCol - 1; jj <= posCol + 1; ++jj) {\n        if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n          csum += move[ii - posRow + 1][jj - posCol + 1];\n          if (csum > r) {\n            newRow = ii;\n            newCol = jj;\n            ii = posRow + 100;\n            break;\n          }\n        }\n      }\n    }\n\n    var newGrid = new Array(n);\n    for (i = 0; i < n; ++i) {\n      newGrid[i] = [];\n      for (j = 0; j < m; ++j) {\n        newGrid[i][j] = 0.0;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      for (j = 0; j < m; ++j) {\n        sum = 0;\n        for (ii = i - 1; ii <= i + 1; ++ii) {\n          for (jj = j - 1; jj <= j + 1; ++jj) {\n            if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n              sum += move[ii - i + 1][jj - j + 1];\n            }\n          }\n        }\n        for (ii = i - 1; ii <= i + 1; ++ii) {\n          for (jj = j - 1; jj <= j + 1; ++jj) {\n            if (ii >= 0 && ii < n && jj >= 0 && jj < m) {\n              newGrid[ii][jj] +=\n                (this.state.grid[i][j] * move[ii - i + 1][jj - j + 1]) / sum;\n            }\n          }\n        }\n      }\n    }\n\n    var newColorGrid = this.getInitialColorGrid(n, m);\n    if (this.state.busted) {\n      this.setState({\n        grid: newGrid,\n        colorGrid: newColorGrid,\n        pos: [newRow, newCol],\n        bustMode: false,\n        hitGrid: this.getInitialHitGrid(n, m),\n        busted: false,\n      });\n    } else {\n      this.setState({\n        grid: newGrid,\n        colorGrid: newColorGrid,\n        pos: [newRow, newCol],\n        bustMode: false,\n      });\n    }\n  }\n\n  render() {\n    var rowStyle = {\n      width: `${75 * this.state.columns}px`,\n      margin: \"auto\",\n    };\n    return (\n      <div>\n        <div className=\"gameGrid\">\n          {this.state.grid.map((rows, row) => {\n            return (\n              <div key={row} style={rowStyle}>\n                {rows.map((value, column) => {\n                  var buttonText = value.toFixed(3);\n                  var buttonStyle = {\n                    background: this.getBoxBgColor(\n                      this.state.grid[row][column]\n                    ),\n                  };\n                  if (this.state.colorGrid[row][column] !== \" \") {\n                    buttonStyle.border = `4px solid ${this.getColor(\n                      this.state.colorGrid[row][column]\n                    )}`;\n                  }\n                  if (this.state.hitGrid[row][column] === 0) {\n                    buttonStyle.background = \"green\";\n                    buttonText = \"MISS\";\n                  } else if (this.state.hitGrid[row][column] >= 1) {\n                    buttonStyle.background = \"red\";\n                    buttonText = \"HIT\";\n                    if (this.state.hitGrid[row][column] > 1) {\n                      buttonText += `${this.state.hitGrid[row][column]}`;\n                    }\n                  }\n                  // console.log(buttonStyle);\n                  return (\n                    <button\n                      key={row * this.state.columns + column}\n                      className=\"boxes\"\n                      onClick={this.handleClick.bind(this, row, column)} \n\t\t\t\t\t  // need to bind this, otherwise button event triggered on page load.. need to learn why\n                      style={buttonStyle}\n                    >\n                      {buttonText}\n                    </button>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n\n        <div>\n          <div className=\"centraliser\">\n            <button className=\"control-buttons\" onClick={this.advanceTime}>\n              TIME+1\n            </button>\n            <button\n              className={\n                \"control-buttons bustButton\" +\n                (this.state.bustMode ? \"Red\" : \"\")\n              }\n              onClick={this.toggleBustMode}\n            >\n              BUST\n            </button>\n          </div>\n\n          <div className=\"centraliser\">{`POSITION: (${this.state.pos[0]}, ${this.state.pos[1]})`}</div>\n          <div className=\"centraliser\">{`BUSTS LEFT X ${this.state.bustsLeft}`}</div>\n          <FooterMessage />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst WrappedGame = withOptimizely(Game);\n\nexport default WrappedGame;\n","import \"./App.css\";\nimport GhostInBackground from \"./GhostImage\";\nimport {\n  createInstance,\n  OptimizelyProvider,\n  useDecision,\n} from \"@optimizely/react-sdk\";\nimport getRandomUserId from \"./utils\";\nimport WrappedGame from \"./Game\";\n\nconst optimizely = createInstance({\n  sdkKey: \"KaL3fPyXBeciBoAn3hGhu\",\n});\n\nfunction App() {\n  const randomUserId = getRandomUserId(6);\n  console.log(randomUserId);\n\n  return (\n    <OptimizelyProvider\n      optimizely={optimizely}\n      user={{\n        id: randomUserId,\n      }}\n    >\n      <Ghosts />\n      <WrappedGame />\n    </OptimizelyProvider>\n  );\n}\n\nfunction Ghosts() {\n  const [decision] = useDecision('ghost_in_bkg');\n  const showGhostInBkg = decision.variables.show_ghost_in_bkg;\n  const ghostSize = decision.variables.ghost_size;\n\n  return (\n    <>\n    {decision && decision.enabled && showGhostInBkg && (\n      <>\n        <GhostInBackground horizontalPosition={0} size={ghostSize} />\n         {/* Need to make horizontalPosition adapt to screen size */}\n        <GhostInBackground horizontalPosition={1200} size={ghostSize} />\n      \n      </>\n      \n    )}\n    </>\n  );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}